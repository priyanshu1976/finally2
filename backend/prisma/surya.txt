generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "postgresql"
url = env("DATABASE_URL")
}

model User {
id Int @id @default(autoincrement())
name String
email String @unique
password String
phone String
city String
role String @default("user")
isBlocked Boolean @default(false)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

orders Order[]
addresses Address[]
Cart Cart[]
CartItem CartItem[]
}
model Address {
id Int @id @default(autoincrement())
userId Int
user User @relation(fields: [userId], references: [id])
label String? // e.g. Home, Work
house String? // House number and floor
street String?
landmark String?
address1 String? // FREE FORM AGAR BHARNA HAI TOH BHARO
city String
createdAt DateTime @default(now())
orders Order[]
}
model EmailVerification {
id Int @id @default(autoincrement())
email String
code String
expiresAt DateTime
createdAt DateTime @default(now())
}

model BlockedUser {
id Int @id @default(autoincrement())
email String @unique
reason String?
createdAt DateTime @default(now())
}

model Category {
id Int @id @default(autoincrement())
name String @unique
description String?
imageUrl String?
products Product[]
createdAt DateTime @default(now())
}

model Product {
id Int @id @default(autoincrement())
name String
description String?
imageUrl String?
price Float
originalPrice Float?
isFeatured Boolean @default(false)
isBestseller Boolean @default(false)
categoryId Int
category Category @relation(fields: [categoryId], references: [id])
availableStock Int @default(0)
stockQuantity Int? @default(0) // Alias for availableStock
rating Float? @default(0.0)
reviewsCount Int? @default(0)
taxPercent Float? @default(0.0)
createdAt DateTime @default(now())
orderItems OrderItem[]

CartItem CartItem[]
}

model Order {
id Int @id @default(autoincrement())
userId Int
user User @relation(fields: [userId], references: [id])
addressId Int?
address Address? @relation(fields: [addressId], references: [id])
totalPrice Float // Keep for backward compatibility
totalAmount Float? // Frontend expects this
paymentMethod String? // Frontend sends this
status String @default("pending")
createdAt DateTime @default(now())
items OrderItem[]

payment Payment?
}

model OrderItem {
id Int @id @default(autoincrement())
orderId Int
order Order @relation(fields: [orderId], references: [id])
productId Int
product Product @relation(fields: [productId], references: [id])
quantity Int
price Float
}

model Payment {
id Int @id @default(autoincrement())
orderId Int @unique
order Order @relation(fields: [orderId], references: [id])
paymentId String
orderRef String
signature String
amount Float
status String
createdAt DateTime @default(now())
}
model Cart {
id Int @id @default(autoincrement())
userId Int @unique
user User @relation(fields: [userId], references: [id])
items CartItem[]
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

model CartItem {
id Int @id @default(autoincrement())
userId Int
user User @relation(fields: [userId], references: [id])
productId Int
product Product @relation(fields: [productId], references: [id])
quantity Int
createdAt DateTime @default(now())

Cart Cart[]
}
